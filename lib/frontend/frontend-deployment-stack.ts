// lib/frontend-stack.ts
import * as cdk from 'aws-cdk-lib'
import * as cloudfront from 'aws-cdk-lib/aws-cloudfront'
import * as origins from 'aws-cdk-lib/aws-cloudfront-origins'
import * as s3 from 'aws-cdk-lib/aws-s3'
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment'
import { Construct } from 'constructs'
import * as path from 'path'
import { addTemplateTag } from '../../utils'

export class FrontendDeploymentStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props)
    addTemplateTag(this, 'MultiTenantSaaSFrontend')

    // Create an S3 bucket for your site content.
    // The bucket is kept private (publicReadAccess: false)
    // and blocks all public access.
    const websiteBucket = new s3.Bucket(this, 'MultiTenantSaaSWebsiteBucket', {
      publicReadAccess: false,
      removalPolicy: cdk.RemovalPolicy.DESTROY, // NOT recommended for production
      autoDeleteObjects: true, // NOT recommended for production
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      websiteIndexDocument: 'index.html', // Enables directory indexing
    })

    // Create a CloudFront distribution for the S3 bucket
    const distribution = new cloudfront.Distribution(
      this,
      'MultiTenantSaaSWebsiteDistribution',
      {
        defaultRootObject: 'index.html',
        priceClass: cloudfront.PriceClass.PRICE_CLASS_100, // Use cheapest price class for demo
        defaultBehavior: {
          origin: origins.S3BucketOrigin.withOriginAccessControl(websiteBucket),
          allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
          viewerProtocolPolicy:
            cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
          compress: true,
        },
        errorResponses: [
          {
            httpStatus: 403, // When CloudFront can't find a folder (e.g., /sign-up/)
            responseHttpStatus: 200,
            responsePagePath: '/index.html',
            ttl: cdk.Duration.seconds(0),
          },
          {
            httpStatus: 404, // When Next.js can't find a static page
            responseHttpStatus: 200,
            responsePagePath: '/404.html',
            ttl: cdk.Duration.minutes(10),
          },
        ],
      }
    )

    // Deploy the static site generated by Next.js to the S3 bucket.
    // Adjust the relative path if necessary.
    new s3deploy.BucketDeployment(this, 'DeployMultiTenantSaaSWebsite', {
      sources: [
        s3deploy.Source.asset(path.join(process.cwd(), 'frontend', 'out')),
      ],
      destinationBucket: websiteBucket,
      distribution, // triggers CloudFront invalidation
      distributionPaths: ['/*'],
    })

    new cdk.CfnOutput(this, 'CloudFrontURL', {
      value: distribution.domainName,
      description: 'The URL of the frontend application',
    })
  }
}
